- name: Install AWS Load Balancer Controller
  gather_facts: false
  hosts: localhost
  vars:
    aws_region: us-east-1
    aws_account_id: 005974045893
    vpc_id: vpc-005ac4c2c0bf55635
    private_subnet_ids: subnet-09f2b7d633aa16ef8, subnet-0cbd31c621699719b
    eks_cluster_name: eks-cluster-prd
    alb_controller_policy_name: AWSLoadBalancerControllerIAMPolicy
  
  tasks:
    # - name: Install OIDC 
    #   shell: |
    #          echo $cluster_name
    #          cluster_name="cluster-dev"
    #          eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve
    #   register: associate_iam_oidc_provider

    # - name: Install OIDC (Output)
    #   debug:
    #     var: associate_iam_oidc_provider

    - name: Download IAM Policy
      shell: curl https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json
      register: iam_policy_output

    - name: Create Policy
      shell: |
        aws iam create-policy \
          --policy-name {{alb_controller_policy_name}} \
          --policy-document '{{iam_policy_output.stdout}}'
      register: iam_policy_creation_output

    - name: Create Policy (Output)
      debug:
        var: iam_policy_creation_output 

    - name: Get OIDC Issuer URL
      shell: aws eks describe-cluster --name {{eks_cluster_name}} --region {{aws_region}} --query "cluster.identity.oidc.issuer" --output text
      register: oidc_issuer

    - name: Create IAM Role Trust Policy
      shell: |
        cat > /tmp/trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:aws:iam::{{aws_account_id}}:oidc-provider/{{ oidc_issuer.stdout | regex_replace('https://') }}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "{{ oidc_issuer.stdout | regex_replace('https://') }}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller",
                  "{{ oidc_issuer.stdout | regex_replace('https://') }}:aud": "sts.amazonaws.com"
                }
              }
            }
          ]
        }
        EOF

    - name: Create IAM Role
      shell: |
        aws iam create-role \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --assume-role-policy-document file:///tmp/trust-policy.json
        aws iam attach-role-policy \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --policy-arn arn:aws:iam::{{aws_account_id}}:policy/{{alb_controller_policy_name}}
      register: iam_role_creation_output

    - name: Create Service Account
      shell: |
        kubectl create serviceaccount aws-load-balancer-controller -n kube-system --dry-run=client -o yaml | \
        kubectl annotate --local -f - eks.amazonaws.com/role-arn=arn:aws:iam::{{aws_account_id}}:role/AmazonEKSLoadBalancerControllerRole -o yaml | \
        kubectl apply -f -
      register: service_account_creation_output

    - name: Create IAM Role (Output)
      debug:
        var: iam_role_creation_output

    - name: Add Helm Chart
      shell: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks

    - name: Install Load Balancer Controller
      shell: |
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName={{eks_cluster_name}} \
            --set serviceAccount.create=false \
            --set region={{aws_region}} \
            --set vpcId={{vpc_id}} \
            --set serviceAccount.name=aws-load-balancer-controller 
      register: alb_controller_installation_output

    - name: Install Load Balancer Controller (Output)
      debug:
        var: alb_controller_installation_output

    - name: Install Argo CD
      shell: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      register: argocd_setup_output

    - name: Install Argo CD (Result)
      debug:
        msg: "{{ argocd_setup_output.stdoutÂ }}"
    - name: Get ArgoCD Admin Password
      shell: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
